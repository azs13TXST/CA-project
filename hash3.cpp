// Implementing hash table in C++

/*#include <iostream>
#include <list>
using namespace std;

class HashTable
{
  int capacity;
  list<int> *table;

public:
  HashTable(int V);
  void insertItem(int key, int data);
  void deleteItem(int key);

  int checkPrime(int n) {
    int i;
    if (n == 1 || n == 0) {
      return 0;
    }
    for (i = 2; i < n / 2; i++) {
      if (n % i == 0) {
        return 0;
      }
    }
    return 1;
  }

  int getPrime(int n) {
    if (n % 2 == 0) {
      n++;
    }

    while (!checkPrime(n)) {
      n += 2;
    }
    return n;
  }

  int hashFunction(int key) {
    return (key % capacity);
  }

  void displayHash();
};

HashTable::HashTable(int c) {
  int size = 11;
  //getPrime(c);
  this->capacity = size;
  table = new list<int>[capacity];
}

void HashTable::insertItem(int key, int data) {
  int index = hashFunction(key);
  table[index].push_back(data);
}

void HashTable::deleteItem(int key) {
  int index = hashFunction(key);

  list<int>::iterator i;
  for (i = table[index].begin();i != table[index].end(); i++) {
    if (*i == key)
      break;
  }

  if (i != table[index].end())
    table[index].erase(i);
}

void HashTable::displayHash() {
  for (int i = 0; i < capacity; i++) {
    cout << "table[" << i << "]";
    for (auto x : table[i])
      cout << " --> " << x;
    cout << endl;
  }
}

int main() {
  int key[] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500};

  int data[] = {2, 8, 13, 20, 26, 30, 35, 37, 55, 56, 59, 61, 69, 79, 83, 84, 96, 99, 101, 103, 109, 116, 132, 137, 138, 139, 140, 141, 143, 144, 145, 148, 153, 157, 158, 167, 169, 174, 177, 179, 180, 193, 194, 201, 205, 222, 225, 226, 240, 242, 243, 247, 255, 256, 269, 273, 274, 275, 277, 280, 285, 290, 291, 294, 296, 297, 309, 312, 313, 318, 319, 321, 330, 332, 333, 341, 345, 350, 353, 354, 355, 374, 379, 384, 395, 396, 398, 402, 406, 407, 410, 433, 435, 440, 441, 444, 466, 473, 481, 491, 9, 15, 21, 35, 47, 48, 50, 89, 103, 110, 115, 121, 133, 135, 138, 141, 142, 149, 154, 158, 160, 185, 202, 207, 210, 211, 229, 230, 240, 242, 264, 271, 281, 290, 298, 306, 311, 322, 324, 344, 345, 354, 364, 370, 388, 402, 419, 421, 423, 446, 448, 449, 453, 470, 483, 484, 487, 501, 508, 511, 517, 527, 581, 584, 586, 605, 625, 627, 642, 672, 674, 683, 689, 699, 708, 722, 734, 747, 761, 764, 784, 808, 831, 852, 862, 883, 904, 908, 916, 938, 939, 941, 945, 948, 953, 954, 958, 970, 977, 990, 23, 43, 118, 344, 366, 543, 688, 719, 740, 847, 870, 1230, 1341, 1414, 1485, 1534, 1567, 1606, 1686, 1703, 1919, 2026, 2066, 2082, 2196, 2230, 2234, 2371, 2478, 2581, 2623, 2806, 2811, 2925, 3024, 3082, 3174, 3223, 3484, 3536, 4110, 4980, 5147, 5238, 5420, 5452, 5491, 5532, 5617, 5646, 5669, 5694, 5841, 5871, 5905, 5971, 6204, 6272, 6349, 6472, 6540, 6642, 6719, 6736, 6847, 6914, 7013, 7403, 7426, 7454, 7496, 7497, 7597, 7670, 7711, 7749, 7882, 7901, 8021, 8025, 8066, 8098, 8334, 8375, 8474, 8547, 8630, 8855, 8873, 9091, 9176, 9196, 9231, 9376, 9380, 9455, 9495, 9588, 9618, 9646, 1477, 2584, 3141, 4116, 4119, 4413, 6122, 6806, 7212, 9055, 10915, 12100, 13306, 13371, 13486, 16212, 19004, 19445, 21305, 22221, 23697, 27398, 27531, 27717, 32069, 32583, 32696, 34174, 35152, 35734, 36436, 36702, 38324, 39093, 39291, 41051, 42002, 44847, 44850, 44854, 45787, 45902, 46512, 48292, 48413, 49006, 49717, 50869, 51057, 51140, 52212, 53903, 55022, 55161, 55488, 56249, 59324, 59859, 60392, 60486, 61962, 62008, 62041, 64092, 65564, 66093, 66832, 67776, 67938, 69175, 69745, 71329, 72168, 72996, 74789, 75843, 77026, 77795, 78276, 79186, 79618, 80068, 80527, 81461, 82521, 85855, 85915, 87496, 87977, 88007, 88919, 89217, 93053, 94556, 94714, 94734, 96152, 98026, 98445, 98523};
  
  int size = 500;
  //sizeof(key) / sizeof(key[0]);

  HashTable h(size);

  for (int i = 0; i < size; i++)
    h.insertItem(key[i], data[i]);

  //h.deleteItem(12);
  h.displayHash();
}*/