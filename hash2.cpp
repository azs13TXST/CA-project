#include <iostream>
#include <list>

using namespace std;

class HashTable {
private:
  list<int> *table;
  int total_elements;

  // Hash function to calculate hash for a value:
  int getHash(int key) {
    return key % total_elements;
  }

public:
  // Constructor to create a hash table with 'n' indices:
  HashTable(int n) {
    total_elements = n;
    table = new list<int>[total_elements];
  }

  // Insert data in the hash table:
  void insertElement(int key) {
    table[getHash(key)].push_back(key);
  }

  // Remove data from the hash table:
  void removeElement(int key) {
    int x = getHash(key);

    list<int>::iterator i; 
    for (i = table[x].begin(); i != table[x].end(); i++) { 
      // Check if the iterator points to the required item:
      if (*i == key) 
        break;
    }

    // If the item was found in the list, then delete it:
    if (i != table[x].end()) 
      table[x].erase(i);
  }

  void printAll() {
    // Traverse each index:
    for(int i = 0; i < total_elements; i++) {
      cout << "Index " << i << ": ";
      // Traverse the list at current index:
      for(int j : table[i])
        cout << j << " => ";

      cout << endl;
    }
  }
};

int main() {
  // Create a hash table with 3 indices:
  HashTable ht(11);

  // Declare the data to be stored in the hash table:
  int arr[] = {4, 5, 10, 17, 25, 28, 30, 31, 35, 36, 38, 41, 50, 51, 56, 58, 62, 70, 74, 81, 82, 86, 93, 94, 99, 102, 104, 118, 122, 126, 135, 136, 139, 160, 162, 163, 166, 167, 170, 182, 190, 193, 194, 196, 202, 211, 220, 224, 227, 234, 236, 243, 247, 249, 252, 255, 269, 277, 278, 288, 293, 298, 299, 303, 311, 314, 323, 342, 346, 352, 355, 356, 364, 367, 370, 383, 385, 387, 389, 394, 407, 423, 426, 427, 434, 437, 441, 449, 453, 455, 457, 460, 478, 487, 489, 491, 493, 495, 497, 499, 25, 51, 53, 72, 87, 111, 122, 139, 142, 144, 153, 154, 173, 175, 179, 183, 187, 190, 200, 201, 219, 241, 269, 270, 271, 274, 283, 292, 297, 298, 305, 331, 338, 346, 372, 388, 409, 424, 427, 429, 432, 438, 441, 453, 462, 475, 485, 491, 494, 502, 517, 555, 576, 580, 585, 588, 599, 616, 628, 632, 643, 650, 654, 660, 664, 665, 686, 699, 713, 723, 739, 745, 753, 761, 762, 771, 790, 795, 797, 806, 811, 820, 821, 845, 877, 898, 902, 906, 909, 916, 923, 925, 938, 948, 952, 960, 964, 981, 990, 101, 114, 118, 148, 151, 164, 167, 264, 311, 336, 358, 364, 420, 452, 454, 538, 597, 605, 681, 847, 851, 915, 985, 1038, 1046, 1091, 1185, 1206, 1219, 1337, 1356, 1374, 1497, 1551, 1552, 1559, 1630, 1648, 1811, 1829, 1871, 1883, 1922, 1925, 1952, 2001, 2016, 2237, 2371, 2406, 2457, 2460, 2497, 2541, 2557, 2636, 2786, 2869, 2897, 2904, 2984, 3030, 3057, 3165, 3183, 3194, 3211, 3429, 3433, 3464, 3579, 3615, 3619, 3620, 3650, 3702, 3722, 3784, 3943, 3961, 3992, 4020, 4051, 4293, 4444, 4507, 4570, 4592, 4597, 4646, 4753, 4813, 4814, 4840, 4853, 4881, 4904, 4940, 4953, 4978, 89, 90, 215, 407, 585, 806, 811, 846, 903, 1045, 1223, 1291, 1320, 1332, 1362, 1390, 1452, 1500, 1513, 1530, 1772, 1903, 1935, 2054, 2435, 2574, 2747, 2765, 2803, 2819, 2845, 2858, 2917, 2940, 2965, 3013, 3058, 3199, 3277, 3299, 3339, 3378, 3483, 3506, 3766, 3780, 3833, 3891, 3916, 4054, 4093, 4158, 4256, 4261, 4390, 4445, 4553, 4976, 5008, 5037, 5381, 5482, 5484, 5493, 5519, 5636, 5661, 5933, 5965, 5989, 6109, 6178, 6349, 6391, 6462, 6701, 7093, 7094, 7107, 7370, 7453, 7493, 7583, 7589, 7607, 7612, 7768, 7891, 8160, 8220, 8453, 8580, 8689, 9013, 9099, 9119, 9120, 9678, 9825, 9921, 58, 1241, 2016, 2315, 3312, 3564, 3968, 4622, 6213, 6724, 8100, 8866, 8868, 9440, 9962, 10082, 11084, 13960, 14397, 15186, 16742, 18268, 18941, 19346, 21424, 21817, 22645, 24376, 26133, 26417, 26523, 26906, 28596, 32288, 37209, 37834, 37862, 39645, 40235, 40540, 41454, 43358, 43695, 47227, 47552, 48219, 49286, 49891, 50168, 50200, 50339, 51604, 52028, 53777, 53804, 54747, 55172, 55922, 56194, 56205, 57618, 61377, 61597, 61852, 63878, 64973, 67042, 68213, 69003, 70013, 72335, 73212, 73620, 73788, 74457, 74882, 76018, 76306, 76430, 79798, 80109, 81037, 82019, 82804, 83224, 84438, 86005, 87635, 87943, 88710, 88712, 91265, 91331, 94503, 94775, 95083, 97854, 99396, 99732, 99926};

  // Insert the whole data into the hash table:
  for(int i = 0; i < 510; i++)
    ht.insertElement(arr[i]);

  cout << "..:: Hash Table ::.." << endl;
  ht.printAll();

  return 0;
}